// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(FysioContext))]
    partial class FysioContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DomainModel.Models.PatientFileModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfDismissal")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfSignUp")
                        .HasColumnType("datetime2");

                    b.Property<string>("DiagnoseCodeAndDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IllnessDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IntakeDoneByEmail")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IntakeSupervisedByEmail")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsStudent")
                        .HasColumnType("bit");

                    b.Property<string>("MainTherapistEmail")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TreatmentPlan")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IntakeDoneByEmail");

                    b.HasIndex("IntakeSupervisedByEmail");

                    b.HasIndex("MainTherapistEmail");

                    b.ToTable("Patient_Files");
                });

            modelBuilder.Entity("DomainModel.Models.PersonModel", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Email");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("DomainModel.Models.RemarkModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PatientFileModelId")
                        .HasColumnType("int");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TherapistEmail")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("VisibleToPatient")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("PatientFileModelId");

                    b.HasIndex("TherapistEmail");

                    b.ToTable("Remarks");
                });

            modelBuilder.Entity("DomainModel.Models.TreatmentModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PatientFileModelId")
                        .HasColumnType("int");

                    b.Property<int?>("RemarkId")
                        .HasColumnType("int");

                    b.Property<string>("Room")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TreatmentByEmail")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("TreatmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PatientFileModelId");

                    b.HasIndex("RemarkId");

                    b.HasIndex("TreatmentByEmail");

                    b.ToTable("Treatments");
                });

            modelBuilder.Entity("DomainModel.Models.PatientModel", b =>
                {
                    b.HasBaseType("DomainModel.Models.PersonModel");

                    b.Property<string>("DateOfBirth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<int?>("PatientFileId")
                        .HasColumnType("int");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeID")
                        .HasColumnType("int");

                    b.HasIndex("PatientFileId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("DomainModel.Models.StudentModel", b =>
                {
                    b.HasBaseType("DomainModel.Models.PersonModel");

                    b.Property<string>("Availability")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("DomainModel.Models.TherapistModel", b =>
                {
                    b.HasBaseType("DomainModel.Models.PersonModel");

                    b.Property<string>("Availability")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BIGNumber")
                        .HasColumnType("int");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.ToTable("Therapists");
                });

            modelBuilder.Entity("DomainModel.Models.PatientFileModel", b =>
                {
                    b.HasOne("DomainModel.Models.TherapistModel", "IntakeDoneBy")
                        .WithMany()
                        .HasForeignKey("IntakeDoneByEmail");

                    b.HasOne("DomainModel.Models.TherapistModel", "IntakeSupervisedBy")
                        .WithMany()
                        .HasForeignKey("IntakeSupervisedByEmail");

                    b.HasOne("DomainModel.Models.TherapistModel", "MainTherapist")
                        .WithMany()
                        .HasForeignKey("MainTherapistEmail");

                    b.Navigation("IntakeDoneBy");

                    b.Navigation("IntakeSupervisedBy");

                    b.Navigation("MainTherapist");
                });

            modelBuilder.Entity("DomainModel.Models.RemarkModel", b =>
                {
                    b.HasOne("DomainModel.Models.PatientFileModel", null)
                        .WithMany("Remarks")
                        .HasForeignKey("PatientFileModelId");

                    b.HasOne("DomainModel.Models.TherapistModel", "Therapist")
                        .WithMany()
                        .HasForeignKey("TherapistEmail");

                    b.Navigation("Therapist");
                });

            modelBuilder.Entity("DomainModel.Models.TreatmentModel", b =>
                {
                    b.HasOne("DomainModel.Models.PatientFileModel", null)
                        .WithMany("Treatments")
                        .HasForeignKey("PatientFileModelId");

                    b.HasOne("DomainModel.Models.RemarkModel", "Remark")
                        .WithMany()
                        .HasForeignKey("RemarkId");

                    b.HasOne("DomainModel.Models.TherapistModel", "TreatmentBy")
                        .WithMany()
                        .HasForeignKey("TreatmentByEmail");

                    b.Navigation("Remark");

                    b.Navigation("TreatmentBy");
                });

            modelBuilder.Entity("DomainModel.Models.PatientModel", b =>
                {
                    b.HasOne("DomainModel.Models.PersonModel", null)
                        .WithOne()
                        .HasForeignKey("DomainModel.Models.PatientModel", "Email")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("DomainModel.Models.PatientFileModel", "PatientFile")
                        .WithMany()
                        .HasForeignKey("PatientFileId");

                    b.Navigation("PatientFile");
                });

            modelBuilder.Entity("DomainModel.Models.StudentModel", b =>
                {
                    b.HasOne("DomainModel.Models.PersonModel", null)
                        .WithOne()
                        .HasForeignKey("DomainModel.Models.StudentModel", "Email")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DomainModel.Models.TherapistModel", b =>
                {
                    b.HasOne("DomainModel.Models.PersonModel", null)
                        .WithOne()
                        .HasForeignKey("DomainModel.Models.TherapistModel", "Email")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DomainModel.Models.PatientFileModel", b =>
                {
                    b.Navigation("Remarks");

                    b.Navigation("Treatments");
                });
#pragma warning restore 612, 618
        }
    }
}
